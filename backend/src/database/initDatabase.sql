
-- \\database\\ --
CREATE DATABASE wagtrail_local;
-- \c wagtrail -- connect to database then proceed
-- \d -- display relations


-- profiles --
CREATE TABLE IF NOT EXISTS profiles (
   id integer GENERATED ALWAYS AS IDENTITY,
   locator_number integer NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 234365) UNIQUE,

   full_name varchar(120),
   reside_in varchar(120),
   about_story varchar(450),
   
   preference_setting jsonb,
   created_at timestamp(0) with time zone DEFAULT current_timestamp(0),
   deleted_at timestamp(0) with time zone,
   modified_at timestamp(0) with time zone,

   PRIMARY KEY (id)
);

-- accounts --
CREATE TABLE IF NOT EXISTS accounts (
   id integer GENERATED ALWAYS AS IDENTITY,
   profile_id integer NOT NULL UNIQUE,

   email_address varchar(45) NOT NULL UNIQUE,
   password_hash char(170) NOT NULL,

   created_at timestamp(0) with time zone DEFAULT current_timestamp(0),
   updated_at timestamp(0) with time zone,
   deactivated_at timestamp(0) with time zone,
   reactivated_at timestamp(0) with time zone,
   modified_at timestamp(0) with time zone,

   PRIMARY KEY (id),
   FOREIGN KEY (profile_id) REFERENCES profiles (id)

);


-- pets --
CREATE TABLE IF NOT EXISTS pets (
   id integer GENERATED ALWAYS AS IDENTITY,
   profile_id integer NOT NULL,

   pet_name varchar(45),
   breed_primary varchar(120),
   breed_secondary varchar(120),
   weight_size varchar(45),
   year_estimate integer,

   created_at timestamp(0) with time zone DEFAULT current_timestamp(0),
   updated_at timestamp(0) with time zone,
   modified_at timestamp(0) with time zone,

   CHECK(weight_size in ('toy', 'small', 'medium', 'large', 'giant')),
   PRIMARY KEY (id),
   FOREIGN KEY (profile_id) REFERENCES profiles(id)
);

-- parks --
CREATE TABLE IF NOT EXISTS parks (
   id integer GENERATED ALWAYS AS IDENTITY,
   locator_number integer NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 232612) UNIQUE,

   park_name varchar(255) NOT NULL UNIQUE,
   dog_on_road boolean,
   dog_on_trail boolean,
   dog_on_beach boolean,
   dog_in_campground boolean,

   pet_friendly_rating decimal CHECK (pet_friendly_rating >= 0 AND pet_friendly_rating <= 5),
   area_overall_rating decimal CHECK (area_overall_rating >= 0 AND area_overall_rating <= 5),

   latitude numeric NOT NULL,
   longitude numeric NOT NULL,

   created_at timestamp(0) with time zone DEFAULT current_timestamp(0),
   modified_at timestamp(0) with time zone,

   PRIMARY KEY (id)
);

-- favorites --
CREATE TABLE IF NOT EXISTS favorites (
   id integer GENERATED ALWAYS AS IDENTITY,
   profile_id integer NOT NULL,
   park_id integer NOT NULL,
   created_at timestamp(0) with time zone DEFAULT current_timestamp(0),
   modified_at timestamp(0) with time zone,

   UNIQUE (profile_id, park_id),
   PRIMARY KEY (id),
   FOREIGN KEY (profile_id) REFERENCES profiles (id),
   FOREIGN KEY (park_id) REFERENCES parks (id)
);


-- ratings --
CREATE TABLE IF NOT EXISTS ratings (
   id integer GENERATED ALWAYS AS IDENTITY,
   profile_id integer NOT NULL,
   park_id integer NOT NULL,

   on_road smallint,
   on_trail smallint,
   on_beach smallint,
   in_campground smallint,
   pet_friendly smallint NOT NULL,
   area_overall smallint NOT NULL,

   created_at timestamp(0) with time zone DEFAULT current_timestamp(0),
   updated_at timestamp(0) with time zone,
   modified_at timestamp(0) with time zone,

   UNIQUE (profile_id, park_id),
   PRIMARY KEY (id),
   FOREIGN KEY (profile_id) REFERENCES profiles (id),
   FOREIGN KEY (park_id) REFERENCES parks (id)
);


-- reviews --
CREATE TABLE IF NOT EXISTS reviews (
   id integer GENERATED ALWAYS AS IDENTITY,
   profile_id integer NOT NULL,
   park_id integer NOT NULL,

   review_content text,
   visited_with_pet_id integer,
   visited_date date,

   created_at timestamp(0) with time zone DEFAULT current_timestamp(0),
   updated_at timestamp(0) with time zone,
   modified_at timestamp(0) with time zone,

   UNIQUE (profile_id, park_id),
   PRIMARY KEY (id),
   FOREIGN KEY (profile_id) REFERENCES profiles (id),
   FOREIGN KEY (park_id) REFERENCES parks (id)
);


-- suggestions --
CREATE TABLE IF NOT EXISTS suggestions (
   id integer GENERATED ALWAYS AS IDENTITY,
   profile_id integer NOT NULL,
   park_id integer NOT NULL,

   dog_on_road boolean,
   dog_on_trail boolean,
   dog_on_beach boolean,
   dog_in_campground boolean,

   created_at timestamp(0) with time zone DEFAULT current_timestamp(0),
   modified_at timestamp(0) with time zone,

   UNIQUE (profile_id, park_id),
   PRIMARY KEY (id),
   FOREIGN KEY (profile_id) REFERENCES profiles (id),
   FOREIGN KEY (park_id) REFERENCES parks (id)
);


-- account activities -- 
CREATE TABLE IF NOT EXISTS account_activities (
   id integer GENERATED ALWAYS AS IDENTITY,
   email_address varchar(45),
   profile_id integer,
   -- account_id integer,
   activity_type varchar(6) NOT NULL,

   created_at timestamp(0) with time zone DEFAULT current_timestamp(0),
   modified_at timestamp(0) with time zone,
   CHECK(activity_type in ('signup', 'login', 'logout', 'forget', 'reset', 'deactivate', 'reactivate')),
   PRIMARY KEY (id),
   FOREIGN KEY (email_address) REFERENCES accounts(email_address),
   FOREIGN KEY (profile_id) REFERENCES profiles(id)
);

-- parks information -- 
CREATE TABLE IF NOT EXISTS parks_information (
   locator_number integer,

   full_address varchar(255),
   phone_number varchar(255),
   organization_website varchar(255),

   dog_allowed boolean,
   dog_policy text,

   town varchar(255),
   county varchar(255),
   state varchar(255),
   zip_code varchar(255),
   country varchar(255),

   created_at timestamp(0) with time zone DEFAULT current_timestamp(0),
   modified_at timestamp(0) with time zone,

   PRIMARY KEY (locator_number),
   FOREIGN KEY (locator_number) REFERENCES parks (locator_number)
);


-- parks external --
CREATE TABLE IF NOT EXISTS parks_external (
   locator_number integer,

   maps_place_name varchar(255),
   maps_place_id varchar(255),
   maps_plus_code varchar(255),
   maps_place_rating decimal,
   maps_place_ratings_total integer,
   maps_url varchar(255),

   created_at timestamp(0) with time zone DEFAULT current_timestamp(0),
   modified_at timestamp(0) with time zone,

   PRIMARY KEY (locator_number),
   FOREIGN KEY (locator_number) REFERENCES parks (locator_number)
);


-- json external -- both usa cities and dog breeds
CREATE TABLE IF NOT EXISTS option_sets (
   id integer GENERATED ALWAYS AS IDENTITY,
   set_name varchar(45) NOT NULL,
   option_value varchar(255) NOT NULL UNIQUE,

   PRIMARY KEY (id)
);


-- \\functions\\ --
CREATE OR REPLACE FUNCTION update_modified_at()
RETURNS TRIGGER AS $$
BEGIN
   IF row(NEW.*) IS DISTINCT FROM row(OLD.*) THEN
      NEW.modified_at = now(); 
      RETURN NEW;
   ELSE
      RETURN OLD;
   END IF;
END;
$$ LANGUAGE plpgsql;

-- \\triggers\\ --
CREATE OR REPLACE TRIGGER update_modified_at_parks
   BEFORE INSERT OR UPDATE ON parks
   FOR EACH ROW
   EXECUTE PROCEDURE update_modified_at();

CREATE OR REPLACE TRIGGER update_modified_at_profiles
   BEFORE INSERT OR UPDATE ON profiles
   FOR EACH ROW
   EXECUTE PROCEDURE update_modified_at();

CREATE OR REPLACE TRIGGER update_modified_at_pets
   BEFORE INSERT OR UPDATE ON pets
   FOR EACH ROW
   EXECUTE PROCEDURE update_modified_at();

CREATE OR REPLACE TRIGGER update_modified_at_reviews
   BEFORE INSERT OR UPDATE ON reviews
   FOR EACH ROW
   EXECUTE PROCEDURE update_modified_at();

CREATE OR REPLACE TRIGGER update_modified_at_favorites 
   BEFORE INSERT OR UPDATE ON favorites
   FOR EACH ROW
   EXECUTE PROCEDURE update_modified_at();

CREATE OR REPLACE TRIGGER update_modified_at_account_activities
   BEFORE INSERT OR UPDATE ON account_activities
   FOR EACH ROW
   EXECUTE PROCEDURE update_modified_at();

CREATE OR REPLACE TRIGGER update_modified_at_parks_information
   BEFORE INSERT OR UPDATE ON parks_information
   FOR EACH ROW
   EXECUTE PROCEDURE update_modified_at();

CREATE OR REPLACE TRIGGER update_modified_at_parks_external
   BEFORE INSERT OR UPDATE ON parks_external
   FOR EACH ROW
   EXECUTE PROCEDURE update_modified_at();










-- *** previously *** --

-- PRIMARY KEY equals to UNIQUE NOT NULL
-- GENERATED ALWAYS AS IDENTITY

-- modified at -- for debugging database

-- park aggregated -- necessary to be a table, but only run once a day
   -- pet_friendly_rating decimal,
   -- area_overall_rating decimal,
-- park external (google maps place api) --

-- park national -- administered by department -- is_national boolean,

-- activity_type smallint NOT NULL,
-- 1 sign up, 2 log in, 3 log out, 


-- 4 give ratings, 5 write review, 6 add collect, 7 remove collect, 

-- extensions -- not needed anymore when uuid generated in backend
-- CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
-- id uuid DEFAULT uuid_generate_v4() -- table column


-- all ids are database ids, default generated on database when inserting the row into table
-- all reference numbers are generated on the backend, and are exposed in urls


-- DROP TABLE account_activities, favorites, parks, parks_external, parks_information, reviews, profiles;